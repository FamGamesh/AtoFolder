name: Release APK

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Fix Gradle Wrapper
      run: |
        echo "Fixing Gradle Wrapper..."
        
        # Remove any existing wrapper files that might be corrupted
        rm -f gradle/wrapper/gradle-wrapper.jar
        
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Download the correct gradle-wrapper.jar
        echo "Downloading gradle-wrapper.jar..."
        curl -L -o gradle/wrapper/gradle-wrapper.jar "https://raw.githubusercontent.com/gradle/gradle/v8.4.0/gradle/wrapper/gradle-wrapper.jar"
        
        # Verify download
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "First download failed, trying alternative..."
          wget -O gradle/wrapper/gradle-wrapper.jar "https://github.com/gradle/gradle/raw/v8.4.0/gradle/wrapper/gradle-wrapper.jar"
        fi
        
        # Check if file exists and has reasonable size
        ls -la gradle/wrapper/
        
        # Ensure gradle-wrapper.properties is correct
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Make gradlew executable
        chmod +x gradlew
        
        echo "Gradle wrapper fixed successfully"

    - name: Test Gradle Wrapper
      run: |
        echo "Testing Gradle wrapper..."
        ./gradlew --version

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Create Missing Android Resources
      run: |
        echo "Creating missing Android resources..."
        
        # Install ImageMagick for icon generation
        sudo apt-get update
        sudo apt-get install -y imagemagick
        
        # Create mipmap directories
        mkdir -p app/src/main/res/mipmap-hdpi
        mkdir -p app/src/main/res/mipmap-mdpi
        mkdir -p app/src/main/res/mipmap-xhdpi
        mkdir -p app/src/main/res/mipmap-xxhdpi
        mkdir -p app/src/main/res/mipmap-xxxhdpi
        
        # Create a simple launcher icon if it doesn't exist
        if [ ! -f "app/src/main/res/mipmap-mdpi/ic_launcher.png" ]; then
          echo "Generating launcher icons..."
          
          # Create a folder-themed icon (blue with white folder icon)
          convert -size 48x48 xc:"#2196F3" \
                  -fill white -gravity center \
                  -pointsize 16 -weight bold -annotate 0 "📁" \
                  app/src/main/res/mipmap-mdpi/ic_launcher.png
          
          # Generate different sizes
          convert app/src/main/res/mipmap-mdpi/ic_launcher.png -resize 72x72 app/src/main/res/mipmap-hdpi/ic_launcher.png
          convert app/src/main/res/mipmap-mdpi/ic_launcher.png -resize 96x96 app/src/main/res/mipmap-xhdpi/ic_launcher.png
          convert app/src/main/res/mipmap-mdpi/ic_launcher.png -resize 144x144 app/src/main/res/mipmap-xxhdpi/ic_launcher.png
          convert app/src/main/res/mipmap-mdpi/ic_launcher.png -resize 192x192 app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
          
          echo "Generated launcher icons successfully"
        fi
        
        # Create values directory and resources (same as debug workflow)
        mkdir -p app/src/main/res/values
        
        # Copy colors.xml and other resources from debug workflow
        cat > app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <!-- Primary Colors -->
            <color name="primary">#2196F3</color>
            <color name="primary_dark">#1976D2</color>
            <color name="primary_blue">#2196F3</color>
            <color name="primary_blue_dark">#1976D2</color>
            
            <!-- Accent Colors -->
            <color name="accent">#FF5722</color>
            <color name="accent_orange">#FF5722</color>
            
            <!-- Background Colors -->
            <color name="background_primary">#FAFAFA</color>
            <color name="background_secondary">#FFFFFF</color>
            
            <!-- Text Colors -->
            <color name="primary_text">#212121</color>
            <color name="secondary_text">#757575</color>
            <color name="text_white">#FFFFFF</color>
            
            <!-- Standard Colors -->
            <color name="white">#FFFFFF</color>
            <color name="black">#000000</color>
            <color name="gray">#9E9E9E</color>
            <color name="light_gray">#F5F5F5</color>
            <color name="dark_gray">#424242</color>
            
            <!-- Status Colors -->
            <color name="success">#4CAF50</color>
            <color name="warning">#FFC107</color>
            <color name="error">#F44336</color>
            <color name="info">#2196F3</color>
            
            <!-- Material Design Colors -->
            <color name="purple_200">#FFBB86FC</color>
            <color name="purple_500">#FF6200EE</color>
            <color name="purple_700">#FF3700B3</color>
            <color name="teal_200">#FF03DAC5</color>
            <color name="teal_700">#FF018786</color>
        </resources>
        EOF

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Sign APK (if keystore secrets exist)
      if: ${{ secrets.KEYSTORE_FILE }}
      run: |
        echo "Signing APK with release keystore"
        echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > release-keystore.jks
        
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore release-keystore.jks \
          -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
          -keypass "${{ secrets.KEY_PASSWORD }}" \
          app/build/outputs/apk/release/app-release-unsigned.apk \
          "${{ secrets.KEY_ALIAS }}"
        
        $ANDROID_HOME/build-tools/35.0.0/zipalign -v 4 \
          app/build/outputs/apk/release/app-release-unsigned.apk \
          app/build/outputs/apk/release/AutoFolderDeleter-v${{ github.ref_name }}.apk
        
        rm release-keystore.jks
        
    - name: Rename unsigned APK (if no keystore)
      if: ${{ !secrets.KEYSTORE_FILE }}
      run: |
        mv app/build/outputs/apk/release/app-release-unsigned.apk \
           app/build/outputs/apk/release/AutoFolderDeleter-v${{ github.ref_name }}-unsigned.apk

    - name: Upload Release APK to Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          app/build/outputs/apk/release/AutoFolderDeleter-*.apk
        body: |
          ## Auto Folder Deleter ${{ github.ref_name }}
          
          ### Installation
          1. Download the APK below
          2. Enable "Unknown Sources" in Android Settings
          3. Install and grant required permissions
          
          ### Features
          - Automatic folder deletion every 3 days (configurable)
          - Background service survives device reboots
          - Modern Material Design interface
          - Android/data folder support
          - Comprehensive permission management
          
          ### Requirements
          - Android 5.0+ (API 21)
          - Storage permissions
          - Battery optimization disabled (recommended)
          
          Built with GitHub Actions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
